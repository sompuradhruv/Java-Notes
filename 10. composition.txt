composition

A composition in Java between two objects associated with each other 
exists when there is a strong relationship between one class and another. 
Other classes cannot exist without the owner or parent class. 
For example, A ‘Human’ class is a composition of Heart and lungs. 
When the human object dies, no body parts exist.

The composition is a restricted form of Aggregation. 
In Composition, one class includes another class 
and is dependent on it so that it cannot functionally exist without another class.

Implementation of Composition in Java
The engine and car relationship are implemented using Java classes as below. 
In Java, the ‘final’ keyword is used to represent Composition. 
This is because the ‘Owner’ object expects a part object to be available and function by making it ‘final’.

public class Car {

           private final Engine theengine; 

    public Car(){

    theengine  = new Engine();

}

}

 class Engine {

private String type;

}

